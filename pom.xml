<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  
  <modelVersion>4.0.0</modelVersion>
  
  <groupId>pt.test.cmg</groupId>
  <artifactId>payara-jdk-tester</artifactId>
  <version>1.0.0</version>
  
  <packaging>war</packaging>
  
  <properties>
	
		<final.name>payara-jdk-tester</final.name>

		<!-- General properties -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- JAVA version -->
		<java-version>17</java-version>

		<!-- Payara version -->
		<payara-version>6.2022.1.Alpha2</payara-version>

		<!-- Maven plugin versions -->
		<war-plugin-version>3.3.1</war-plugin-version>
		<clean-plugin-version>3.1.0</clean-plugin-version>
		<compiler-plugin-version>3.8.1</compiler-plugin-version>
		<deploy-plugin-version>3.0.0-M1</deploy-plugin-version>
		<install-plugin-version>3.0.0-M1</install-plugin-version>
		<resources-plugin-version>3.2.0</resources-plugin-version>

		<payara-micro-plugin-version>1.4.0</payara-micro-plugin-version>

		<!-- EJB Maven plugin version -->
		<ejb-maven-version>3.2</ejb-maven-version>

		<domain.dir>${user.home}/payara-jdk-tester/domain</domain.dir>
		
		<!-- Relational Database Driver -->
        <postgresql-driver-version>42.3.3</postgresql-driver-version>

        <apache-poi-version>5.2.1</apache-poi-version>
        <aws-javasdkv2-version>2.17.151</aws-javasdkv2-version>
        <aws-sqs-javalib-version>1.0.8</aws-sqs-javalib-version>
        <commons-lang3-version>3.12.0</commons-lang3-version>
        <commons-io-version>2.11.0</commons-io-version>
        <commons-csv-version>1.9.0</commons-csv-version>
        <commons-net-version>3.8.0</commons-net-version>
        <coobird-thumbnailator-version>0.4.17</coobird-thumbnailator-version>
        <drewnoakes-metadata-extractor-version>2.16.0</drewnoakes-metadata-extractor-version>
        <owasp-encoder-version>1.2.3</owasp-encoder-version>
        <guava-version>31.1-jre</guava-version>
        <kafka-client-version>3.1.0</kafka-client-version>
        <mortennobel-image-scaling-version>0.8.6</mortennobel-image-scaling-version>
        <slf4j-version>1.7.36</slf4j-version>
        <slack-api-version>1.20.2</slack-api-version>
        <web-push-version>5.1.1</web-push-version>
        <bouncycastle-version>1.71</bouncycastle-version>
        <google-auth-oauth2-version>1.2.2</google-auth-oauth2-version>
        <google-analytics-version>v3-rev169-1.25.0</google-analytics-version>

	</properties>
	
	
	<profiles>
	
		<profile>
			<id>debug</id>
			<build>
				<plugins>
					<plugin>
						<groupId>fish.payara.maven.plugins</groupId>
						<artifactId>payara-micro-maven-plugin</artifactId>
						<version>${payara-micro-plugin-version}</version>

						<configuration>
							<useUberJar>true</useUberJar>
							<javaCommandLineOptions>
								<option>
									<value>-Xdebug</value>
								</option>
								<option>
									<key>-Xrunjdwp:transport</key>
									<value>dt_socket,server=y,suspend=y,address=5005</value>
								</option>
							</javaCommandLineOptions>
						</configuration>

					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>
	
	
	<build>
	
		<finalName>payara-jdk-tester</finalName>
	
		<pluginManagement>
			<plugins>

				<!-- Maven Clean Plugin , used to clean up after build -->
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>${clean-plugin-version}</version>
				</plugin>


				<!-- Maven Compiler Plugin , for JARs -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${compiler-plugin-version}</version>
					<configuration>
						<release>${java-version}</release>
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
				</plugin>

				<!-- Maven Deploy plugin, to deploy built artifacts to a remote repository, not that we use it but at least this version is controlled -->
				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>${deploy-plugin-version}</version>
				</plugin>

				<!-- Maven Install plugin, install the build artifacts into the LOCAL repository -->
				<plugin>
					<artifactId>maven-install-plugin</artifactId>
					<version>${install-plugin-version}</version>
				</plugin>

				<!-- Maven Resources plugin, copies the resources to output directory to include in final JAR -->
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>${resources-plugin-version}</version>
				</plugin>

				<!-- Maven WAR Plugin, for WARs -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>${war-plugin-version}</version>
					<configuration>
						<!-- Since we are using Servlet 3+ we do not need web.xml to register JAX-RS webservices so the war plugin must not fail if it doesn't find it -->
						<failOnMissingWebXml>false</failOnMissingWebXml>
						<attachClasses>true</attachClasses>
						<classesClassifier>classes</classesClassifier>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>${jar-plugin-version}</version>
				</plugin>
				
				
				<!-- Payara Micro bundle execution will configure the Uber JAR -->
                <plugin>
                    <groupId>fish.payara.maven.plugins</groupId>
                    <artifactId>payara-micro-maven-plugin</artifactId>
                    <version>${payara-micro-plugin-version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>start</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <useUberJar>true</useUberJar>

                        <commandLineOptions>
                            <option>
                                <key>--nocluster</key>
                            </option>
                        </commandLineOptions>

                    </configuration>
                </plugin>
                
			</plugins>
		</pluginManagement>
		
		<plugins>

            <!-- Payara Micro bundle execution will configure the Uber JAR -->
            <plugin>
                <groupId>fish.payara.maven.plugins</groupId>
                <artifactId>payara-micro-maven-plugin</artifactId>

                <!-- An execution must be defined to activate payara plugin and create a uber jar -->
                <executions>

                    <execution>
                        <id>BUNDLE</id>
                        <goals>
                            <goal>bundle</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <payaraVersion>${payara-version}</payaraVersion>
                            <systemProperties>
                                <property>
                                    <name>payaramicro.port</name>
                                    <value>20000</value>
                                </property>
                                <!--property>
                                    <name>payaramicro.rootDir</name>
                                    <value>${domain.dir}</value>
                                </property-->
                                <property>
	                                <name>org.glassfish.deployment.trace</name>
	                                <value>true</value>
	                            </property>
                            </systemProperties>
                            <appendSystemProperties>true</appendSystemProperties>
                        </configuration>
                    </execution>

                </executions>
            </plugin>

        </plugins>
	
	</build>
	
	<dependencyManagement>
		<dependencies>

			<!-- All of our provided dependencies actually come from the application server -->
			<dependency>
				<groupId>fish.payara.api</groupId>
				<artifactId>payara-bom</artifactId>
				<version>${payara-version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		
		
            <dependency>
                <groupId>software.amazon.awssdk</groupId>
                <artifactId>bom</artifactId>
                <type>pom</type>
                <version>${aws-javasdkv2-version}</version>
                <scope>import</scope>
            </dependency>
            
            </dependencies>
		
	</dependencyManagement>
	
	<dependencies>
        <!-- Platform dependencies -->
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile</groupId>
            <artifactId>microprofile</artifactId>
            <type>pom</type>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.health</groupId>
            <artifactId>microprofile-health-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.core</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.jpa.modelgen.processor</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.weld</groupId>
            <artifactId>weld-osgi-bundle</artifactId>
            <scope>provided</scope>
        </dependency>


        <!-- Third-party compile dependencies -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>compile</scope>
            <version>${postgresql-driver-version}</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>s3</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.owasp.encoder</groupId>
            <artifactId>encoder</artifactId>
            <scope>compile</scope>
            <version>${owasp-encoder-version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <scope>compile</scope>
            <version>${commons-lang3-version}</version>
        </dependency>
        <dependency>
            <groupId>commons-net</groupId>
            <artifactId>commons-net</artifactId>
            <version>${commons-net-version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-csv</artifactId>
            <version>${commons-csv-version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>${apache-poi-version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency> <!-- This dependency is needed because  mvn won't find some schemas at compile time -->
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml-full</artifactId>
            <version>${apache-poi-version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.slack.api</groupId>
            <artifactId>slack-api-client</artifactId>
            <version>${slack-api-version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.google.auth</groupId>
            <artifactId>google-auth-library-oauth2-http</artifactId>
            <version>${google-auth-oauth2-version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.apis</groupId>
            <artifactId>google-api-services-analytics</artifactId>
            <version>${google-analytics-version}</version>
        </dependency>
        <dependency>
            <groupId>org.ow2.asm</groupId>
            <artifactId>asm</artifactId>
            <version>9.3</version>
        </dependency>
        <dependency>
            <groupId>org.ow2.asm</groupId>
            <artifactId>asm-analysis</artifactId>
            <version>9.3</version>
        </dependency>
        <dependency>
            <groupId>org.ow2.asm</groupId>
            <artifactId>asm-commons</artifactId>
            <version>9.3</version>
        </dependency>
        <dependency>
            <groupId>org.ow2.asm</groupId>
            <artifactId>asm-tree</artifactId>
            <version>9.3</version>
        </dependency>
        <dependency>
            <groupId>org.ow2.asm</groupId>
            <artifactId>asm-util</artifactId>
            <version>9.3</version>
        </dependency>


    </dependencies>
  
</project>